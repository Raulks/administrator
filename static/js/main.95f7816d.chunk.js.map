{"version":3,"sources":["components/Formulario.js","App.js","serviceWorker.js","index.js"],"names":["Formulario","useState","pet","owner","date","time","symptoms","meeting","upgradeMeeting","error","updatError","handleChange","e","target","name","value","className","onSubmit","preventDefault","trim","id","uuidv4","type","placeholder","onChange","App","alt","src","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"oNA+GeA,EA5GI,WAAM,MAGWC,mBAAS,CACzCC,IAAK,GACLC,MAAO,GACPC,KAAM,GACNC,KAAM,GACNC,SAAU,KARW,mBAGhBC,EAHgB,KAGPC,EAHO,OAUKP,oBAAS,GAVd,mBAUhBQ,EAVgB,KAUTC,EAVS,KAYjBC,EAAe,SAACC,GAAD,OACnBJ,EAAe,2BACVD,GADS,kBAEXK,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,UAKtBb,EAAqCK,EAArCL,IAAKC,EAAgCI,EAAhCJ,MAAOC,EAAyBG,EAAzBH,KAAMC,EAAmBE,EAAnBF,KAAMC,EAAaC,EAAbD,SA2BhC,OACE,kBAAC,WAAD,KACE,8CACCG,EACC,uBAAGO,UAAU,gBAAb,oCACE,KACJ,0BAAMC,SA7BY,SAACL,GACrBA,EAAEM,iBAIe,KAAfhB,EAAIiB,QACa,KAAjBhB,EAAMgB,QACQ,KAAdf,EAAKe,MACS,KAAdd,EAAKc,MACa,KAAlBb,EAASa,MAMXT,GAAW,GAGXH,EAAQa,GAAKC,eAPXX,GAAW,KAmBT,6CACA,2BACEY,KAAK,OACLR,KAAK,MACLE,UAAU,eACVO,YAAY,mBACZC,SAAUb,EACVI,MAAOb,IAET,+CACA,2BACEoB,KAAK,OACLR,KAAK,QACLE,UAAU,eACVO,YAAY,YACZC,SAAUb,EACVI,MAAOZ,IAET,wDACA,2BACEmB,KAAK,OACLR,KAAK,OACLE,UAAU,eACVQ,SAAUb,EACVI,MAAOX,IAET,uCACA,2BACEkB,KAAK,OACLR,KAAK,OACLE,UAAU,eACVQ,SAAUb,EACVI,MAAOV,IAET,2CACA,8BACEW,UAAU,eACVF,KAAK,WACLS,YAAY,uCACZC,SAAUb,EACVI,MAAOT,IAET,4BACEgB,KAAK,SACLN,UAAU,8BACVQ,SAAUb,GAHZ,cC/EOc,MAlBf,WACE,OACE,kBAAC,WAAD,KACE,0CAAe,yBAAKC,IAAI,MAAMC,IAAI,+DAGlC,yBAAKX,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,mBACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,mBAAf,SCDUY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAnC,GACLoC,QAAQpC,MAAMA,EAAMqC,a","file":"static/js/main.95f7816d.chunk.js","sourcesContent":["import React, { Fragment, useState } from \"react\";\nimport { v4 as uuidv4 } from 'uuid';\n\nconst Formulario = () => {\n  // State for meetings\n\n  const [meeting, upgradeMeeting] = useState({\n    pet: \"\",\n    owner: \"\",\n    date: \"\",\n    time: \"\",\n    symptoms: \"\",\n  });\n  const [error, updatError] = useState(false);\n\n  const handleChange = (e) =>\n    upgradeMeeting({\n      ...meeting,\n      [e.target.name]: e.target.value,\n    });\n\n  //Extracting values\n\n  const { pet, owner, date, time, symptoms } = meeting;\n\n  // When press confirm\n\n  const submitMeeting = (e) => {\n    e.preventDefault();\n\n    //Validate\n    if (\n      pet.trim() === \"\" ||\n      owner.trim() === \"\" ||\n      date.trim === \"\" ||\n      time.trim === \"\" ||\n      symptoms.trim === \"\"\n    ) {\n      updatError(true);\n      return;\n    }\n    //delete error message\n    updatError(false);\n    \n    //id asigmnet\n    meeting.id = uuidv4();\n    //create a meeting\n\n    //restart form\n  };\n  return (\n    <Fragment>\n      <h2>Create meeting</h2>\n      {error ? (\n        <p className=\"alerta-error\"> You must fill in all the fields</p>\n      ) : null}\n      <form onSubmit={submitMeeting}>\n        <label>Pet's name</label>\n        <input\n          type=\"text\"\n          name=\"pet\"\n          className=\"u-full-width\"\n          placeholder=\"Name of your pet\"\n          onChange={handleChange}\n          value={pet}\n        />\n        <label>Owner's name</label>\n        <input\n          type=\"text\"\n          name=\"owner\"\n          className=\"u-full-width\"\n          placeholder=\"Your name\"\n          onChange={handleChange}\n          value={owner}\n        />\n        <label>When will we see you?</label>\n        <input\n          type=\"date\"\n          name=\"date\"\n          className=\"u-full-width\"\n          onChange={handleChange}\n          value={date}\n        />\n        <label>Time</label>\n        <input\n          type=\"time\"\n          name=\"time\"\n          className=\"u-full-width\"\n          onChange={handleChange}\n          value={time}\n        />\n        <label>Symptoms</label>\n        <textarea\n          className=\"u-full-width\"\n          name=\"symptoms\"\n          placeholder=\"Tell us something about what happend\"\n          onChange={handleChange}\n          value={symptoms}\n        ></textarea>\n        <button\n          type=\"submit\"\n          className=\"u-full-width button-primary\"\n          onChange={handleChange}\n        >\n          Confirm\n        </button>\n      </form>\n    </Fragment>\n  );\n};\n\nexport default Formulario;\n","import React, { Fragment } from \"react\";\nimport Formulario from './components/Formulario'\nfunction App() {\n  return (\n    <Fragment>\n      <h1>Chariot Vet<img alt='dog' src=\"https://img.icons8.com/pastel-glyph/64/000000/dog--v2.png\"/></h1>\n \n\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n            <Formulario />\n          </div>\n          <div className=\"one-half column\">2</div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}