{"version":3,"sources":["components/Formulario.js","components/Cita.js","App.js","serviceWorker.js","index.js"],"names":["Formulario","crearCita","useState","mascota","propietario","fecha","hora","sintomas","cita","actualizarCita","error","actualizarError","actualizarState","e","target","name","value","className","onSubmit","preventDefault","trim","id","uuidv4","type","placeholder","onChange","Cita","eliminarCita","onClick","App","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCitas","useEffect","setItem","stringify","nuevasCitas","filter","titulo","length","map","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.8306cb47.chunk.js","sourcesContent":["import React, { Fragment, useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport PropTypes from \"prop-types\";\n\nconst Formulario = ({ crearCita }) => {\n  // Crear State de Citas\n  const [cita, actualizarCita] = useState({\n    mascota: \"\",\n    propietario: \"\",\n    fecha: \"\",\n    hora: \"\",\n    sintomas: \"\",\n  });\n  const [error, actualizarError] = useState(false);\n\n  // Funci칩n que se ejecuta cada que el usuario escribe en un input\n  const actualizarState = (e) => {\n    actualizarCita({\n      ...cita,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  // Extraer los valores\n  const { mascota, propietario, fecha, hora, sintomas } = cita;\n\n  // Cuando el usuario presiona agregar cita\n  const submitCita = (e) => {\n    e.preventDefault();\n\n    // Validar\n    if (\n      mascota.trim() === \"\" ||\n      propietario.trim() === \"\" ||\n      fecha.trim() === \"\" ||\n      hora.trim() === \"\" ||\n      sintomas.trim() === \"\"\n    ) {\n      actualizarError(true);\n      return;\n    }\n    // Eliminar el mensaje previo\n    actualizarError(false);\n\n    //id asigmnet\n    cita.id = uuidv4();\n\n    // Crear la cita\n    crearCita(cita);\n\n    // Reiniciar el form\n    actualizarCita({\n      mascota: \"\",\n      propietario: \"\",\n      fecha: \"\",\n      hora: \"\",\n      sintomas: \"\",\n    });\n  };\n\n  return (\n    <Fragment>\n      <h2>Make an Appointment</h2>\n\n      {error ? (\n        <p className=\"alerta-error\">You must fill in all fields!</p>\n      ) : null}\n\n      <form onSubmit={submitCita}>\n        <label>Pet's name</label>\n        <input\n          type=\"text\"\n          name=\"mascota\"\n          className=\"u-full-width\"\n          placeholder=\"Nombre Mascota\"\n          onChange={actualizarState}\n          value={mascota}\n        />\n\n        <label>Owner's name</label>\n        <input\n          type=\"text\"\n          name=\"propietario\"\n          className=\"u-full-width\"\n          placeholder=\"Nombre  Due침o de la mascota\"\n          onChange={actualizarState}\n          value={propietario}\n        />\n\n        <label>Date</label>\n        <input\n          type=\"date\"\n          name=\"fecha\"\n          className=\"u-full-width\"\n          onChange={actualizarState}\n          value={fecha}\n        />\n\n        <label>Time</label>\n        <input\n          type=\"time\"\n          name=\"hora\"\n          className=\"u-full-width\"\n          onChange={actualizarState}\n          value={hora}\n        />\n\n        <label>Symptoms</label>\n        <textarea\n          className=\"u-full-width\"\n          name=\"sintomas\"\n          onChange={actualizarState}\n          value={sintomas}\n        ></textarea>\n\n        <button type=\"submit\" className=\"u-full-width button-primary\">\n          Confirm\n        </button>\n      </form>\n    </Fragment>\n  );\n};\n\nFormulario.propTypes = {\n  crearCita: PropTypes.func.isRequired,\n};\n\nexport default Formulario;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Cita = ({ cita, eliminarCita }) => (\n  <div className=\"cita\">\n    <p>\n      Pet: <span>{cita.mascota}</span>{\" \"}\n    </p>\n    <p>\n      Owner: <span>{cita.propietario}</span>{\" \"}\n    </p>\n    <p>\n      Date: <span>{cita.fecha}</span>{\" \"}\n    </p>\n    <p>\n      Time: <span>{cita.hora}</span>{\" \"}\n    </p>\n    <p>\n      Symptoms: <span>{cita.sintomas}</span>{\" \"}\n    </p>\n\n    <button\n      className=\"button eliminar u-full-width\"\n      onClick={() => eliminarCita(cita.id)}\n    >\n      Delete &times;\n    </button>\n  </div>\n);\n\nCita.propTypes = {\n  cita: PropTypes.object.isRequired,\n  eliminarCita: PropTypes.func.isRequired,\n};\n\nexport default Cita;\n","import React, { Fragment, useState, useEffect } from \"react\";\nimport Formulario from \"./components/Formulario\";\nimport Cita from \"./components/Cita\";\n\nfunction App() {\n  // Citas en local storage\n  let citasIniciales = JSON.parse(localStorage.getItem(\"citas\"));\n  if (!citasIniciales) {\n    citasIniciales = [];\n  }\n\n  // Arreglo de citas\n  const [citas, guardarCitas] = useState(citasIniciales);\n\n  // Use Effect para realizar ciertas operaciones cuando el state cambia\n  useEffect(() => {\n    let citasIniciales = JSON.parse(localStorage.getItem(\"citas\"));\n\n    if (citasIniciales) {\n      localStorage.setItem(\"citas\", JSON.stringify(citas));\n    } else {\n      localStorage.setItem(\"citas\", JSON.stringify([]));\n    }\n  }, [citas]);\n\n  // Funci칩n que tome las citas actuales y agregue la nueva\n  const crearCita = (cita) => {\n    guardarCitas([...citas, cita]);\n  };\n\n  // Funci칩n que elimina una cita por su id\n  const eliminarCita = (id) => {\n    const nuevasCitas = citas.filter((cita) => cita.id !== id);\n    guardarCitas(nuevasCitas);\n  };\n\n  // Mensaje condicional\n  const titulo = citas.length === 0 ? \"There are no appointments\" : \"Manage your appointments\";\n\n  return (\n    <Fragment>\n      <h1>MYVET</h1>\n\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n            <Formulario crearCita={crearCita} />\n          </div>\n          <div className=\"one-half column\">\n            <h2>{titulo}</h2>\n            {citas.map((cita) => (\n              <Cita key={cita.id} cita={cita} eliminarCita={eliminarCita} />\n            ))}\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}